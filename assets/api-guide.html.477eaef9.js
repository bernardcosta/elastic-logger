import{_ as e,e as o}from"./app.87d462ce.js";const t={},n=o(`<h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h3 id="environment-variables" tabindex="-1"><a class="header-anchor" href="#environment-variables" aria-hidden="true">#</a> Environment Variables</h3><p>The server uses <code>.env</code> file to look for specific environment variables.</p><ol><li><code>ES_SERVER=&lt;host&gt;:&lt;port&gt;</code> (required). This variable is used to locate the elasticsearch instance to write to</li><li><code>NODE_LISTEN=&lt;host&gt;:&lt;port-in&gt;:&lt;port-out&gt;</code> (optional). If hosting on a docker container, this field is required in order to bind the host port to guest and be able to discover the server outside of docker.</li><li><code>APP_PORT=&lt;port&gt;</code> (optional). Defaults to <code>3000</code> in server.</li></ol><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If using both <code>NODE_LISTEN</code> and <code>APP_PORT</code>, <code>&lt;port-out&gt;</code> in <code>NODE_LISTEN</code> must be the same as <code>APP_PORT</code>.</p></div><p>The <code>.env</code> file is not committed to the repo since it is host machine specific. <code>.env.example</code> shows an example of the contents of this file.</p><h3 id="post-level-channel" tabindex="-1"><a class="header-anchor" href="#post-level-channel" aria-hidden="true">#</a> POST /level/channel</h3><p>Use this endpoint to log results to <code>elasticsearch</code> server instance.</p><p>Example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> --request POST <span class="token punctuation">\\</span>
  --url <span class="token operator">&lt;</span>your_url<span class="token operator">&gt;</span>/DEBUG/MyApp <span class="token punctuation">\\</span>
  --header <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token punctuation">\\</span>
  --data <span class="token string">&#39;{
        	&quot;code&quot;: 200,
        	&quot;message&quot;: &quot;dev/testing API&quot;,
            &quot;another_key&quot;: &quot;another_value&quot;
        }&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>level</code> path parameter should contain the log level choice. It can be one of: <ul><li><code>DEBUG</code></li><li><code>INFO</code></li><li><code>WARNING</code></li><li><code>ERROR</code></li><li><code>CRITICAL</code></li></ul></li><li>The <code>channel</code> path parameter can contain any string that categorises the log. For example an app or project name the log belongs to.</li><li>The <code>url</code> should contain the correct hostname.</li><li>The <code>data</code> json field can contain any set of key value pairs you want to log.</li></ul>`,11);function a(i,s){return n}var l=e(t,[["render",a],["__file","api-guide.html.vue"]]);export{l as default};
